/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestOffchainAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "acceptPayeeship(address)": FunctionFragment;
    "addAccess(address)": FunctionFragment;
    "billingAccessController()": FunctionFragment;
    "billingData()": FunctionFragment;
    "checkEnabled()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "disableAccessCheck()": FunctionFragment;
    "enableAccessCheck()": FunctionFragment;
    "getAnswer(uint256)": FunctionFragment;
    "getBilling()": FunctionFragment;
    "getConfigDigest()": FunctionFragment;
    "getLinkToken()": FunctionFragment;
    "getRoundData(uint80)": FunctionFragment;
    "getTimestamp(uint256)": FunctionFragment;
    "hasAccess(address,bytes)": FunctionFragment;
    "latestAnswer()": FunctionFragment;
    "latestConfigDetails()": FunctionFragment;
    "latestRound()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "latestTimestamp()": FunctionFragment;
    "latestTransmissionDetails()": FunctionFragment;
    "linkAvailableForPayment()": FunctionFragment;
    "maxAnswer()": FunctionFragment;
    "minAnswer()": FunctionFragment;
    "oracleObservationCount(address)": FunctionFragment;
    "owedPayment(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAccess(address)": FunctionFragment;
    "requestNewRound()": FunctionFragment;
    "requesterAccessController()": FunctionFragment;
    "setBilling(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "setBillingAccessController(address)": FunctionFragment;
    "setConfig(address[],address[],uint8,uint64,bytes)": FunctionFragment;
    "setLinkToken(address,address)": FunctionFragment;
    "setPayees(address[],address[])": FunctionFragment;
    "setRequesterAccessController(address)": FunctionFragment;
    "setValidatorConfig(address,uint32)": FunctionFragment;
    "testAccountingGasCost()": FunctionFragment;
    "testBurnLINK(uint256)": FunctionFragment;
    "testDecodeReport(bytes)": FunctionFragment;
    "testImpliedGasPrice(uint256,uint256,uint256)": FunctionFragment;
    "testPayee(address)": FunctionFragment;
    "testSaturatingAddUint16(uint16,uint16)": FunctionFragment;
    "testSetGasReimbursements(address,uint256)": FunctionFragment;
    "testSetOracleObservationCount(address,uint16)": FunctionFragment;
    "testTotalLinkDue()": FunctionFragment;
    "testTransmitterGasCostEthWei(uint256,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPayeeship(address,address)": FunctionFragment;
    "transmit(bytes,bytes32[],bytes32[],bytes32)": FunctionFragment;
    "transmitters()": FunctionFragment;
    "typeAndVersion()": FunctionFragment;
    "validatorConfig()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawFunds(address,uint256)": FunctionFragment;
    "withdrawPayment(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPayeeship",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addAccess", values: [string]): string;
  encodeFunctionData(
    functionFragment: "billingAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "billingData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableAccessCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableAccessCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBilling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigDigest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTransmissionDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkAvailableForPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxAnswer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAnswer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleObservationCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owedPayment", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requesterAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBilling",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBillingAccessController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [string[], string[], BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayees",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequesterAccessController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorConfig",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testAccountingGasCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBurnLINK",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testDecodeReport",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testImpliedGasPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "testPayee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "testSaturatingAddUint16",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSetGasReimbursements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSetOracleObservationCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTotalLinkDue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTransmitterGasCostEthWei",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayeeship",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [BytesLike, BytesLike[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "billingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "billingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAccessCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAccessCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfigDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTransmissionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAvailableForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleObservationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owedPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requesterAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBillingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequesterAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAccountingGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBurnLINK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDecodeReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testImpliedGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testPayee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testSaturatingAddUint16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetGasReimbursements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSetOracleObservationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTotalLinkDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransmitterGasCostEthWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;

  events: {
    "AddedAccess(address)": EventFragment;
    "AnswerUpdated(int256,uint256,uint256)": EventFragment;
    "BillingAccessControllerSet(address,address)": EventFragment;
    "BillingSet(uint32,uint32,uint32,uint32,uint32)": EventFragment;
    "CheckAccessDisabled()": EventFragment;
    "CheckAccessEnabled()": EventFragment;
    "ConfigSet(uint32,uint64,address[],address[],uint8,uint64,bytes)": EventFragment;
    "LinkTokenSet(address,address)": EventFragment;
    "NewRound(uint256,address,uint256)": EventFragment;
    "NewTransmission(uint32,int192,address,int192[],bytes,bytes32)": EventFragment;
    "OraclePaid(address,address,uint256,address)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayeeshipTransferRequested(address,address,address)": EventFragment;
    "PayeeshipTransferred(address,address,address)": EventFragment;
    "RemovedAccess(address)": EventFragment;
    "RequesterAccessControllerSet(address,address)": EventFragment;
    "RoundRequested(address,bytes16,uint32,uint8)": EventFragment;
    "ValidatorConfigSet(address,uint32,address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedAccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillingAccessControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillingSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckAccessDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckAccessEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTransmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedAccess"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequesterAccessControllerSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorConfigSet"): EventFragment;
}

export type AddedAccessEvent = TypedEvent<[string] & { user: string }>;

export type AnswerUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    current: BigNumber;
    roundId: BigNumber;
    updatedAt: BigNumber;
  }
>;

export type BillingAccessControllerSetEvent = TypedEvent<
  [string, string] & { old: string; current: string }
>;

export type BillingSetEvent = TypedEvent<
  [number, number, number, number, number] & {
    maximumGasPrice: number;
    reasonableGasPrice: number;
    microLinkPerEth: number;
    linkGweiPerObservation: number;
    linkGweiPerTransmission: number;
  }
>;

export type CheckAccessDisabledEvent = TypedEvent<[] & {}>;

export type CheckAccessEnabledEvent = TypedEvent<[] & {}>;

export type ConfigSetEvent = TypedEvent<
  [number, BigNumber, string[], string[], number, BigNumber, string] & {
    previousConfigBlockNumber: number;
    configCount: BigNumber;
    signers: string[];
    transmitters: string[];
    threshold: number;
    encodedConfigVersion: BigNumber;
    encoded: string;
  }
>;

export type LinkTokenSetEvent = TypedEvent<
  [string, string] & { _oldLinkToken: string; _newLinkToken: string }
>;

export type NewRoundEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    roundId: BigNumber;
    startedBy: string;
    startedAt: BigNumber;
  }
>;

export type NewTransmissionEvent = TypedEvent<
  [number, BigNumber, string, BigNumber[], string, string] & {
    aggregatorRoundId: number;
    answer: BigNumber;
    transmitter: string;
    observations: BigNumber[];
    observers: string;
    rawReportContext: string;
  }
>;

export type OraclePaidEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    transmitter: string;
    payee: string;
    amount: BigNumber;
    linkToken: string;
  }
>;

export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type PayeeshipTransferRequestedEvent = TypedEvent<
  [string, string, string] & {
    transmitter: string;
    current: string;
    proposed: string;
  }
>;

export type PayeeshipTransferredEvent = TypedEvent<
  [string, string, string] & {
    transmitter: string;
    previous: string;
    current: string;
  }
>;

export type RemovedAccessEvent = TypedEvent<[string] & { user: string }>;

export type RequesterAccessControllerSetEvent = TypedEvent<
  [string, string] & { old: string; current: string }
>;

export type RoundRequestedEvent = TypedEvent<
  [string, string, number, number] & {
    requester: string;
    configDigest: string;
    epoch: number;
    round: number;
  }
>;

export type ValidatorConfigSetEvent = TypedEvent<
  [string, number, string, number] & {
    previousValidator: string;
    previousGasLimit: number;
    currentValidator: string;
    currentGasLimit: number;
  }
>;

export class TestOffchainAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestOffchainAggregatorInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    billingAccessController(overrides?: CallOverrides): Promise<[string]>;

    billingData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        observationsCounts: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        gasReimbursements: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    checkEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    disableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBilling(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    getConfigDigest(overrides?: CallOverrides): Promise<[string]>;

    getLinkToken(
      overrides?: CallOverrides
    ): Promise<[string] & { linkToken: string }>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasAccess(
      _user: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        configCount: number;
        blockNumber: number;
        configDigest: string;
      }
    >;

    latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestTransmissionDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, BigNumber] & {
        configDigest: string;
        epoch: number;
        round: number;
        latestAnswer: BigNumber;
        latestTimestamp: BigNumber;
      }
    >;

    linkAvailableForPayment(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableBalance: BigNumber }>;

    maxAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requesterAccessController(overrides?: CallOverrides): Promise<[string]>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _signers: string[],
      _transmitters: string[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequesterAccessController(
      _requesterAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidatorConfig(
      _newValidator: string,
      _newGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testAccountingGasCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    testBurnLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testDecodeReport(
      report: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber[]]>;

    testImpliedGasPrice(
      txGasPrice: BigNumberish,
      reasonableGasPrice: BigNumberish,
      maximumGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testPayee(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testSaturatingAddUint16(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    testSetGasReimbursements(
      _transmitterOrSigner: string,
      _amountLinkWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSetOracleObservationCount(
      _oracle: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testTotalLinkDue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { linkDue: BigNumber }>;

    testTransmitterGasCostEthWei(
      initialGas: BigNumberish,
      gasPrice: BigNumberish,
      callDataCost: BigNumberish,
      gasLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmit(
      _report: BytesLike,
      _rs: BytesLike[],
      _ss: BytesLike[],
      _rawVs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmitters(overrides?: CallOverrides): Promise<[string[]]>;

    typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

    validatorConfig(
      overrides?: CallOverrides
    ): Promise<[string, number] & { validator: string; gasLimit: number }>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptPayeeship(
    _transmitter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAccess(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  billingAccessController(overrides?: CallOverrides): Promise<string>;

  billingData(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ],
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      number,
      number,
      number,
      number,
      number
    ] & {
      observationsCounts: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
      gasReimbursements: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      maximumGasPrice: number;
      reasonableGasPrice: number;
      microLinkPerEth: number;
      linkGweiPerObservation: number;
      linkGweiPerTransmission: number;
    }
  >;

  checkEnabled(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  disableAccessCheck(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableAccessCheck(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAnswer(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBilling(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number] & {
      maximumGasPrice: number;
      reasonableGasPrice: number;
      microLinkPerEth: number;
      linkGweiPerObservation: number;
      linkGweiPerTransmission: number;
    }
  >;

  getConfigDigest(overrides?: CallOverrides): Promise<string>;

  getLinkToken(overrides?: CallOverrides): Promise<string>;

  getRoundData(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getTimestamp(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasAccess(
    _user: string,
    _calldata: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  latestConfigDetails(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string] & {
      configCount: number;
      blockNumber: number;
      configDigest: string;
    }
  >;

  latestRound(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  latestTransmissionDetails(
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, BigNumber, BigNumber] & {
      configDigest: string;
      epoch: number;
      round: number;
      latestAnswer: BigNumber;
      latestTimestamp: BigNumber;
    }
  >;

  linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

  maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  oracleObservationCount(
    _signerOrTransmitter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  owedPayment(
    _transmitter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAccess(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestNewRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requesterAccessController(overrides?: CallOverrides): Promise<string>;

  setBilling(
    _maximumGasPrice: BigNumberish,
    _reasonableGasPrice: BigNumberish,
    _microLinkPerEth: BigNumberish,
    _linkGweiPerObservation: BigNumberish,
    _linkGweiPerTransmission: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBillingAccessController(
    _billingAccessController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _signers: string[],
    _transmitters: string[],
    _threshold: BigNumberish,
    _encodedConfigVersion: BigNumberish,
    _encoded: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkToken(
    _linkToken: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayees(
    _transmitters: string[],
    _payees: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequesterAccessController(
    _requesterAccessController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidatorConfig(
    _newValidator: string,
    _newGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testAccountingGasCost(overrides?: CallOverrides): Promise<BigNumber>;

  testBurnLINK(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testDecodeReport(
    report: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber[]]>;

  testImpliedGasPrice(
    txGasPrice: BigNumberish,
    reasonableGasPrice: BigNumberish,
    maximumGasPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testPayee(_transmitter: string, overrides?: CallOverrides): Promise<string>;

  testSaturatingAddUint16(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  testSetGasReimbursements(
    _transmitterOrSigner: string,
    _amountLinkWei: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSetOracleObservationCount(
    _oracle: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testTotalLinkDue(overrides?: CallOverrides): Promise<BigNumber>;

  testTransmitterGasCostEthWei(
    initialGas: BigNumberish,
    gasPrice: BigNumberish,
    callDataCost: BigNumberish,
    gasLeft: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPayeeship(
    _transmitter: string,
    _proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmit(
    _report: BytesLike,
    _rs: BytesLike[],
    _ss: BytesLike[],
    _rawVs: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmitters(overrides?: CallOverrides): Promise<string[]>;

  typeAndVersion(overrides?: CallOverrides): Promise<string>;

  validatorConfig(
    overrides?: CallOverrides
  ): Promise<[string, number] & { validator: string; gasLimit: number }>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFunds(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayment(
    _transmitter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAccess(_user: string, overrides?: CallOverrides): Promise<void>;

    billingAccessController(overrides?: CallOverrides): Promise<string>;

    billingData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        number,
        number,
        number,
        number,
        number
      ] & {
        observationsCounts: [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ];
        gasReimbursements: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    checkEnabled(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    disableAccessCheck(overrides?: CallOverrides): Promise<void>;

    enableAccessCheck(overrides?: CallOverrides): Promise<void>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBilling(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    getConfigDigest(overrides?: CallOverrides): Promise<string>;

    getLinkToken(overrides?: CallOverrides): Promise<string>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccess(
      _user: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        configCount: number;
        blockNumber: number;
        configDigest: string;
      }
    >;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    latestTransmissionDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, BigNumber] & {
        configDigest: string;
        epoch: number;
        round: number;
        latestAnswer: BigNumber;
        latestTimestamp: BigNumber;
      }
    >;

    linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

    maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAccess(_user: string, overrides?: CallOverrides): Promise<void>;

    requestNewRound(overrides?: CallOverrides): Promise<BigNumber>;

    requesterAccessController(overrides?: CallOverrides): Promise<string>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      _signers: string[],
      _transmitters: string[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRequesterAccessController(
      _requesterAccessController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorConfig(
      _newValidator: string,
      _newGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testAccountingGasCost(overrides?: CallOverrides): Promise<BigNumber>;

    testBurnLINK(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testDecodeReport(
      report: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber[]]>;

    testImpliedGasPrice(
      txGasPrice: BigNumberish,
      reasonableGasPrice: BigNumberish,
      maximumGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testPayee(_transmitter: string, overrides?: CallOverrides): Promise<string>;

    testSaturatingAddUint16(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    testSetGasReimbursements(
      _transmitterOrSigner: string,
      _amountLinkWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testSetOracleObservationCount(
      _oracle: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testTotalLinkDue(overrides?: CallOverrides): Promise<BigNumber>;

    testTransmitterGasCostEthWei(
      initialGas: BigNumberish,
      gasPrice: BigNumberish,
      callDataCost: BigNumberish,
      gasLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(_to: string, overrides?: CallOverrides): Promise<void>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transmit(
      _report: BytesLike,
      _rs: BytesLike[],
      _ss: BytesLike[],
      _rawVs: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transmitters(overrides?: CallOverrides): Promise<string[]>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    validatorConfig(
      overrides?: CallOverrides
    ): Promise<[string, number] & { validator: string; gasLimit: number }>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedAccess(address)"(
      user?: null
    ): TypedEventFilter<[string], { user: string }>;

    AddedAccess(user?: null): TypedEventFilter<[string], { user: string }>;

    "AnswerUpdated(int256,uint256,uint256)"(
      current?: BigNumberish | null,
      roundId?: BigNumberish | null,
      updatedAt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { current: BigNumber; roundId: BigNumber; updatedAt: BigNumber }
    >;

    AnswerUpdated(
      current?: BigNumberish | null,
      roundId?: BigNumberish | null,
      updatedAt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { current: BigNumber; roundId: BigNumber; updatedAt: BigNumber }
    >;

    "BillingAccessControllerSet(address,address)"(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    BillingAccessControllerSet(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    "BillingSet(uint32,uint32,uint32,uint32,uint32)"(
      maximumGasPrice?: null,
      reasonableGasPrice?: null,
      microLinkPerEth?: null,
      linkGweiPerObservation?: null,
      linkGweiPerTransmission?: null
    ): TypedEventFilter<
      [number, number, number, number, number],
      {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    BillingSet(
      maximumGasPrice?: null,
      reasonableGasPrice?: null,
      microLinkPerEth?: null,
      linkGweiPerObservation?: null,
      linkGweiPerTransmission?: null
    ): TypedEventFilter<
      [number, number, number, number, number],
      {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    "CheckAccessDisabled()"(): TypedEventFilter<[], {}>;

    CheckAccessDisabled(): TypedEventFilter<[], {}>;

    "CheckAccessEnabled()"(): TypedEventFilter<[], {}>;

    CheckAccessEnabled(): TypedEventFilter<[], {}>;

    "ConfigSet(uint32,uint64,address[],address[],uint8,uint64,bytes)"(
      previousConfigBlockNumber?: null,
      configCount?: null,
      signers?: null,
      transmitters?: null,
      threshold?: null,
      encodedConfigVersion?: null,
      encoded?: null
    ): TypedEventFilter<
      [number, BigNumber, string[], string[], number, BigNumber, string],
      {
        previousConfigBlockNumber: number;
        configCount: BigNumber;
        signers: string[];
        transmitters: string[];
        threshold: number;
        encodedConfigVersion: BigNumber;
        encoded: string;
      }
    >;

    ConfigSet(
      previousConfigBlockNumber?: null,
      configCount?: null,
      signers?: null,
      transmitters?: null,
      threshold?: null,
      encodedConfigVersion?: null,
      encoded?: null
    ): TypedEventFilter<
      [number, BigNumber, string[], string[], number, BigNumber, string],
      {
        previousConfigBlockNumber: number;
        configCount: BigNumber;
        signers: string[];
        transmitters: string[];
        threshold: number;
        encodedConfigVersion: BigNumber;
        encoded: string;
      }
    >;

    "LinkTokenSet(address,address)"(
      _oldLinkToken?: string | null,
      _newLinkToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldLinkToken: string; _newLinkToken: string }
    >;

    LinkTokenSet(
      _oldLinkToken?: string | null,
      _newLinkToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldLinkToken: string; _newLinkToken: string }
    >;

    "NewRound(uint256,address,uint256)"(
      roundId?: BigNumberish | null,
      startedBy?: string | null,
      startedAt?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { roundId: BigNumber; startedBy: string; startedAt: BigNumber }
    >;

    NewRound(
      roundId?: BigNumberish | null,
      startedBy?: string | null,
      startedAt?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { roundId: BigNumber; startedBy: string; startedAt: BigNumber }
    >;

    "NewTransmission(uint32,int192,address,int192[],bytes,bytes32)"(
      aggregatorRoundId?: BigNumberish | null,
      answer?: null,
      transmitter?: null,
      observations?: null,
      observers?: null,
      rawReportContext?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber[], string, string],
      {
        aggregatorRoundId: number;
        answer: BigNumber;
        transmitter: string;
        observations: BigNumber[];
        observers: string;
        rawReportContext: string;
      }
    >;

    NewTransmission(
      aggregatorRoundId?: BigNumberish | null,
      answer?: null,
      transmitter?: null,
      observations?: null,
      observers?: null,
      rawReportContext?: null
    ): TypedEventFilter<
      [number, BigNumber, string, BigNumber[], string, string],
      {
        aggregatorRoundId: number;
        answer: BigNumber;
        transmitter: string;
        observations: BigNumber[];
        observers: string;
        rawReportContext: string;
      }
    >;

    "OraclePaid(address,address,uint256,address)"(
      transmitter?: string | null,
      payee?: string | null,
      amount?: null,
      linkToken?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transmitter: string;
        payee: string;
        amount: BigNumber;
        linkToken: string;
      }
    >;

    OraclePaid(
      transmitter?: string | null,
      payee?: string | null,
      amount?: null,
      linkToken?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transmitter: string;
        payee: string;
        amount: BigNumber;
        linkToken: string;
      }
    >;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "PayeeshipTransferRequested(address,address,address)"(
      transmitter?: string | null,
      current?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; current: string; proposed: string }
    >;

    PayeeshipTransferRequested(
      transmitter?: string | null,
      current?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; current: string; proposed: string }
    >;

    "PayeeshipTransferred(address,address,address)"(
      transmitter?: string | null,
      previous?: string | null,
      current?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; previous: string; current: string }
    >;

    PayeeshipTransferred(
      transmitter?: string | null,
      previous?: string | null,
      current?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; previous: string; current: string }
    >;

    "RemovedAccess(address)"(
      user?: null
    ): TypedEventFilter<[string], { user: string }>;

    RemovedAccess(user?: null): TypedEventFilter<[string], { user: string }>;

    "RequesterAccessControllerSet(address,address)"(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    RequesterAccessControllerSet(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    "RoundRequested(address,bytes16,uint32,uint8)"(
      requester?: string | null,
      configDigest?: null,
      epoch?: null,
      round?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { requester: string; configDigest: string; epoch: number; round: number }
    >;

    RoundRequested(
      requester?: string | null,
      configDigest?: null,
      epoch?: null,
      round?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { requester: string; configDigest: string; epoch: number; round: number }
    >;

    "ValidatorConfigSet(address,uint32,address,uint32)"(
      previousValidator?: string | null,
      previousGasLimit?: null,
      currentValidator?: string | null,
      currentGasLimit?: null
    ): TypedEventFilter<
      [string, number, string, number],
      {
        previousValidator: string;
        previousGasLimit: number;
        currentValidator: string;
        currentGasLimit: number;
      }
    >;

    ValidatorConfigSet(
      previousValidator?: string | null,
      previousGasLimit?: null,
      currentValidator?: string | null,
      currentGasLimit?: null
    ): TypedEventFilter<
      [string, number, string, number],
      {
        previousValidator: string;
        previousGasLimit: number;
        currentValidator: string;
        currentGasLimit: number;
      }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    billingAccessController(overrides?: CallOverrides): Promise<BigNumber>;

    billingData(overrides?: CallOverrides): Promise<BigNumber>;

    checkEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    disableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBilling(overrides?: CallOverrides): Promise<BigNumber>;

    getConfigDigest(overrides?: CallOverrides): Promise<BigNumber>;

    getLinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccess(
      _user: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestConfigDetails(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    latestTransmissionDetails(overrides?: CallOverrides): Promise<BigNumber>;

    linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

    maxAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    minAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requesterAccessController(overrides?: CallOverrides): Promise<BigNumber>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      _signers: string[],
      _transmitters: string[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequesterAccessController(
      _requesterAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidatorConfig(
      _newValidator: string,
      _newGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testAccountingGasCost(overrides?: CallOverrides): Promise<BigNumber>;

    testBurnLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testDecodeReport(
      report: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testImpliedGasPrice(
      txGasPrice: BigNumberish,
      reasonableGasPrice: BigNumberish,
      maximumGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testPayee(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSaturatingAddUint16(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSetGasReimbursements(
      _transmitterOrSigner: string,
      _amountLinkWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSetOracleObservationCount(
      _oracle: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testTotalLinkDue(overrides?: CallOverrides): Promise<BigNumber>;

    testTransmitterGasCostEthWei(
      initialGas: BigNumberish,
      gasPrice: BigNumberish,
      callDataCost: BigNumberish,
      gasLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmit(
      _report: BytesLike,
      _rs: BytesLike[],
      _ss: BytesLike[],
      _rawVs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmitters(overrides?: CallOverrides): Promise<BigNumber>;

    typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

    validatorConfig(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    billingAccessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    billingData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableAccessCheck(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBilling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfigDigest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccess(
      _user: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestTransmissionDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkAvailableForPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAccess(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requesterAccessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _signers: string[],
      _transmitters: string[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequesterAccessController(
      _requesterAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorConfig(
      _newValidator: string,
      _newGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testAccountingGasCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBurnLINK(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testDecodeReport(
      report: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testImpliedGasPrice(
      txGasPrice: BigNumberish,
      reasonableGasPrice: BigNumberish,
      maximumGasPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testPayee(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSaturatingAddUint16(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSetGasReimbursements(
      _transmitterOrSigner: string,
      _amountLinkWei: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSetOracleObservationCount(
      _oracle: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testTotalLinkDue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testTransmitterGasCostEthWei(
      initialGas: BigNumberish,
      gasPrice: BigNumberish,
      callDataCost: BigNumberish,
      gasLeft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmit(
      _report: BytesLike,
      _rs: BytesLike[],
      _ss: BytesLike[],
      _rawVs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmitters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
