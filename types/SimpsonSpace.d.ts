/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SimpsonSpaceInterface extends ethers.utils.Interface {
  functions: {
    "_previousLiquidityFee()": FunctionFragment;
    "addToBlackList(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blackList(address)": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deliver(uint256)": FunctionFragment;
    "excludeFromFee(address)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "geUnlockTime()": FunctionFragment;
    "includeInFee(address)": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "manualSwap()": FunctionFragment;
    "marketingAddr1()": FunctionFragment;
    "marketingAddr2()": FunctionFragment;
    "maxTxAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "numTokensToSwap()": FunctionFragment;
    "owner()": FunctionFragment;
    "reflectionFee()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "removeFromBlackList(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLiquidityFeePercent(uint256)": FunctionFragment;
    "setMarketingWallet1(address)": FunctionFragment;
    "setMarketingWallet2(address)": FunctionFragment;
    "setMaxTxPercent(uint256)": FunctionFragment;
    "setMinimunTokenAmountToSwap(uint256)": FunctionFragment;
    "setReflectionFeePercent(uint256)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setTxFeePercent(uint256)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalReflectionFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txFee()": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "unlock()": FunctionFragment;
    "updateUniRouter(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_previousLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "blackList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "geUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "manualSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingAddr1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingAddr2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numTokensToSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet1",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimunTokenAmountToSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReflectionFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReflectionFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "txFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUniRouter",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_previousLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manualSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingAddr1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingAddr2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTokensToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimunTokenAmountToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReflectionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReflectionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUniRouter",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "MinTokensBeforeSwapUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinTokensBeforeSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type MinTokensBeforeSwapUpdatedEvent = TypedEvent<
  [BigNumber] & { minTokensBeforeSwap: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiquidity: BigNumber;
  }
>;

export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class SimpsonSpace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SimpsonSpaceInterface;

  functions: {
    _previousLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blackList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    geUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manualSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketingAddr1(overrides?: CallOverrides): Promise<[string]>;

    marketingAddr2(overrides?: CallOverrides): Promise<[string]>;

    maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numTokensToSwap(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reflectionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferReflectionFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeFromBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeePercent(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingWallet1(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketingWallet2(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTxPercent(
      _maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimunTokenAmountToSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReflectionFeePercent(
      _reflectionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTxFeePercent(
      _txFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalReflectionFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    txFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUniRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _previousLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  addToBlackList(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blackList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deliver(
    tAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  includeInFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manualSwap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketingAddr1(overrides?: CallOverrides): Promise<string>;

  marketingAddr2(overrides?: CallOverrides): Promise<string>;

  maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  numTokensToSwap(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  reflectionFee(overrides?: CallOverrides): Promise<BigNumber>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferReflectionFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeFromBlackList(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeePercent(
    _liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingWallet1(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketingWallet2(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTxPercent(
    _maxTxPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimunTokenAmountToSwap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReflectionFeePercent(
    _reflectionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTxFeePercent(
    _txFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalReflectionFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  txFee(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUniRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _previousLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    addToBlackList(_addr: string, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blackList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deliver(tAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    excludeFromFee(account: string, overrides?: CallOverrides): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(account: string, overrides?: CallOverrides): Promise<void>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    lock(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    manualSwap(overrides?: CallOverrides): Promise<void>;

    marketingAddr1(overrides?: CallOverrides): Promise<string>;

    marketingAddr2(overrides?: CallOverrides): Promise<string>;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numTokensToSwap(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    reflectionFee(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferReflectionFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromBlackList(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLiquidityFeePercent(
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWallet1(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWallet2(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxPercent(
      _maxTxPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimunTokenAmountToSwap(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReflectionFeePercent(
      _reflectionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxFeePercent(
      _txFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReflectionFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    unlock(overrides?: CallOverrides): Promise<void>;

    updateUniRouter(_router: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "MinTokensBeforeSwapUpdated(uint256)"(
      minTokensBeforeSwap?: null
    ): TypedEventFilter<[BigNumber], { minTokensBeforeSwap: BigNumber }>;

    MinTokensBeforeSwapUpdated(
      minTokensBeforeSwap?: null
    ): TypedEventFilter<[BigNumber], { minTokensBeforeSwap: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiquidity: BigNumber;
      }
    >;

    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiquidity: BigNumber;
      }
    >;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    _previousLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    addToBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blackList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manualSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketingAddr1(overrides?: CallOverrides): Promise<BigNumber>;

    marketingAddr2(overrides?: CallOverrides): Promise<BigNumber>;

    maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numTokensToSwap(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFee(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferReflectionFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFromBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFeePercent(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingWallet1(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketingWallet2(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTxPercent(
      _maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimunTokenAmountToSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReflectionFeePercent(
      _reflectionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTxFeePercent(
      _txFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReflectionFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    txFee(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUniRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _previousLiquidityFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    geUnlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manualSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketingAddr1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingAddr2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numTokensToSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reflectionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferReflectionFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromBlackList(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeePercent(
      _liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingWallet1(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingWallet2(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxPercent(
      _maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimunTokenAmountToSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReflectionFeePercent(
      _reflectionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTxFeePercent(
      _txFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReflectionFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    txFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUniRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
