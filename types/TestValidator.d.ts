/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestValidatorInterface extends ethers.utils.Interface {
  functions: {
    "latestRoundId()": FunctionFragment;
    "setMinGasUse(uint32)": FunctionFragment;
    "validate(uint256,int256,uint256,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "latestRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinGasUse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "latestRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinGasUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {
    "Validated(uint256,int256,uint256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Validated"): EventFragment;
}

export type ValidatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    previousRoundId: BigNumber;
    previousAnswer: BigNumber;
    currentRoundId: BigNumber;
    currentAnswer: BigNumber;
    initialGas: BigNumber;
  }
>;

export class TestValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestValidatorInterface;

  functions: {
    latestRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinGasUse(
      minGasUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  latestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  setMinGasUse(
    minGasUse: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(
    previousRoundId: BigNumberish,
    previousAnswer: BigNumberish,
    currentRoundId: BigNumberish,
    currentAnswer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    latestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    setMinGasUse(
      minGasUse: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Validated(uint256,int256,uint256,int256,uint256)"(
      previousRoundId?: null,
      previousAnswer?: null,
      currentRoundId?: null,
      currentAnswer?: null,
      initialGas?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        previousRoundId: BigNumber;
        previousAnswer: BigNumber;
        currentRoundId: BigNumber;
        currentAnswer: BigNumber;
        initialGas: BigNumber;
      }
    >;

    Validated(
      previousRoundId?: null,
      previousAnswer?: null,
      currentRoundId?: null,
      currentAnswer?: null,
      initialGas?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        previousRoundId: BigNumber;
        previousAnswer: BigNumber;
        currentRoundId: BigNumber;
        currentAnswer: BigNumber;
        initialGas: BigNumber;
      }
    >;
  };

  estimateGas: {
    latestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    setMinGasUse(
      minGasUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    latestRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinGasUse(
      minGasUse: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      previousRoundId: BigNumberish,
      previousAnswer: BigNumberish,
      currentRoundId: BigNumberish,
      currentAnswer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
