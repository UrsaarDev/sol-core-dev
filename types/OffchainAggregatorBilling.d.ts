/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OffchainAggregatorBillingInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "acceptPayeeship(address)": FunctionFragment;
    "billingAccessController()": FunctionFragment;
    "getBilling()": FunctionFragment;
    "getLinkToken()": FunctionFragment;
    "linkAvailableForPayment()": FunctionFragment;
    "oracleObservationCount(address)": FunctionFragment;
    "owedPayment(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setBilling(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "setBillingAccessController(address)": FunctionFragment;
    "setLinkToken(address,address)": FunctionFragment;
    "setPayees(address[],address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPayeeship(address,address)": FunctionFragment;
    "withdrawFunds(address,uint256)": FunctionFragment;
    "withdrawPayment(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPayeeship",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "billingAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBilling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkAvailableForPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleObservationCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owedPayment", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBilling",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBillingAccessController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayees",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayeeship",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "billingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAvailableForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleObservationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owedPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBillingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPayees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;

  events: {
    "BillingAccessControllerSet(address,address)": EventFragment;
    "BillingSet(uint32,uint32,uint32,uint32,uint32)": EventFragment;
    "LinkTokenSet(address,address)": EventFragment;
    "OraclePaid(address,address,uint256,address)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayeeshipTransferRequested(address,address,address)": EventFragment;
    "PayeeshipTransferred(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BillingAccessControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillingSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferred"): EventFragment;
}

export type BillingAccessControllerSetEvent = TypedEvent<
  [string, string] & { old: string; current: string }
>;

export type BillingSetEvent = TypedEvent<
  [number, number, number, number, number] & {
    maximumGasPrice: number;
    reasonableGasPrice: number;
    microLinkPerEth: number;
    linkGweiPerObservation: number;
    linkGweiPerTransmission: number;
  }
>;

export type LinkTokenSetEvent = TypedEvent<
  [string, string] & { _oldLinkToken: string; _newLinkToken: string }
>;

export type OraclePaidEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    transmitter: string;
    payee: string;
    amount: BigNumber;
    linkToken: string;
  }
>;

export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type PayeeshipTransferRequestedEvent = TypedEvent<
  [string, string, string] & {
    transmitter: string;
    current: string;
    proposed: string;
  }
>;

export type PayeeshipTransferredEvent = TypedEvent<
  [string, string, string] & {
    transmitter: string;
    previous: string;
    current: string;
  }
>;

export class OffchainAggregatorBilling extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OffchainAggregatorBillingInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    billingAccessController(overrides?: CallOverrides): Promise<[string]>;

    getBilling(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    getLinkToken(
      overrides?: CallOverrides
    ): Promise<[string] & { linkToken: string }>;

    linkAvailableForPayment(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableBalance: BigNumber }>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptPayeeship(
    _transmitter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  billingAccessController(overrides?: CallOverrides): Promise<string>;

  getBilling(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number] & {
      maximumGasPrice: number;
      reasonableGasPrice: number;
      microLinkPerEth: number;
      linkGweiPerObservation: number;
      linkGweiPerTransmission: number;
    }
  >;

  getLinkToken(overrides?: CallOverrides): Promise<string>;

  linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

  oracleObservationCount(
    _signerOrTransmitter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  owedPayment(
    _transmitter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setBilling(
    _maximumGasPrice: BigNumberish,
    _reasonableGasPrice: BigNumberish,
    _microLinkPerEth: BigNumberish,
    _linkGweiPerObservation: BigNumberish,
    _linkGweiPerTransmission: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBillingAccessController(
    _billingAccessController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkToken(
    _linkToken: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPayees(
    _transmitters: string[],
    _payees: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPayeeship(
    _transmitter: string,
    _proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayment(
    _transmitter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    billingAccessController(overrides?: CallOverrides): Promise<string>;

    getBilling(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number] & {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    getLinkToken(overrides?: CallOverrides): Promise<string>;

    linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(_to: string, overrides?: CallOverrides): Promise<void>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BillingAccessControllerSet(address,address)"(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    BillingAccessControllerSet(
      old?: null,
      current?: null
    ): TypedEventFilter<[string, string], { old: string; current: string }>;

    "BillingSet(uint32,uint32,uint32,uint32,uint32)"(
      maximumGasPrice?: null,
      reasonableGasPrice?: null,
      microLinkPerEth?: null,
      linkGweiPerObservation?: null,
      linkGweiPerTransmission?: null
    ): TypedEventFilter<
      [number, number, number, number, number],
      {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    BillingSet(
      maximumGasPrice?: null,
      reasonableGasPrice?: null,
      microLinkPerEth?: null,
      linkGweiPerObservation?: null,
      linkGweiPerTransmission?: null
    ): TypedEventFilter<
      [number, number, number, number, number],
      {
        maximumGasPrice: number;
        reasonableGasPrice: number;
        microLinkPerEth: number;
        linkGweiPerObservation: number;
        linkGweiPerTransmission: number;
      }
    >;

    "LinkTokenSet(address,address)"(
      _oldLinkToken?: string | null,
      _newLinkToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldLinkToken: string; _newLinkToken: string }
    >;

    LinkTokenSet(
      _oldLinkToken?: string | null,
      _newLinkToken?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldLinkToken: string; _newLinkToken: string }
    >;

    "OraclePaid(address,address,uint256,address)"(
      transmitter?: string | null,
      payee?: string | null,
      amount?: null,
      linkToken?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transmitter: string;
        payee: string;
        amount: BigNumber;
        linkToken: string;
      }
    >;

    OraclePaid(
      transmitter?: string | null,
      payee?: string | null,
      amount?: null,
      linkToken?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        transmitter: string;
        payee: string;
        amount: BigNumber;
        linkToken: string;
      }
    >;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "PayeeshipTransferRequested(address,address,address)"(
      transmitter?: string | null,
      current?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; current: string; proposed: string }
    >;

    PayeeshipTransferRequested(
      transmitter?: string | null,
      current?: string | null,
      proposed?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; current: string; proposed: string }
    >;

    "PayeeshipTransferred(address,address,address)"(
      transmitter?: string | null,
      previous?: string | null,
      current?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; previous: string; current: string }
    >;

    PayeeshipTransferred(
      transmitter?: string | null,
      previous?: string | null,
      current?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { transmitter: string; previous: string; current: string }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    billingAccessController(overrides?: CallOverrides): Promise<BigNumber>;

    getBilling(overrides?: CallOverrides): Promise<BigNumber>;

    getLinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    linkAvailableForPayment(overrides?: CallOverrides): Promise<BigNumber>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptPayeeship(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    billingAccessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBilling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkAvailableForPayment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleObservationCount(
      _signerOrTransmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owedPayment(
      _transmitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBilling(
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBillingAccessController(
      _billingAccessController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkToken(
      _linkToken: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPayees(
      _transmitters: string[],
      _payees: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPayeeship(
      _transmitter: string,
      _proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayment(
      _transmitter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
